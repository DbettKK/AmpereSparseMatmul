if __name__ == '__main__':
    data_n, data_c, data_w, data_h = 1, 1, 16, 16
    kernel_n, kernel_c, kernel_w, kernel_h = 64, 1, 9, 9
    padding = 0
    stride = 1
    dtype = 'float32'

    data = make_tensor(data_n, data_c, data_w, data_h, dtype)
    kernel = make_tensor(kernel_n, kernel_c, kernel_w, kernel_h, dtype)

    data_trans = im2col(data, kernel_h, kernel_w, stride, padding, dtype)
    data_trans_w, data_trans_h = data_trans.shape
    kernel_trans = kernel_im2col(kernel, kernel_n, kernel_c, kernel_w, kernel_h)

    m = data_trans_w
    k = data_trans_h
    n = kernel_n
    #print(data)
    #print(kernel)
    print(m, k, n)
    #print(data_trans)
    #print(kernel_trans)

    zero_matrix = make_zero_mat(m, n, dtype)

    # to bin_file
    data.tofile('kernel_3x3/16x16/data.bin')
    kernel.tofile('kernel_3x3/16x16/kernel.bin')
    data_trans.tofile('kernel_3x3/16x16/a.bin')
    kernel_trans.tofile('kernel_3x3/16x16/b.bin')
    zero_matrix.tofile('kernel_3x3/16x16/c.bin')

    ans = np.matmul(data_trans, kernel_trans)
    ans.tofile('kernel_3x3/16x16/answer.bin')